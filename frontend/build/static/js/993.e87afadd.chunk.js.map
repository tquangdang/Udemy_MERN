{"version":3,"file":"static/js/993.e87afadd.chunk.js","mappings":"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","sources":["shared/components/UIElements/Card.js","user/pages/Auth.js"],"sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport \"./Auth.css\";\r\n\r\nconst Auth = () => {\r\n  const auth = useContext(AuthContext);\r\n\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image: {\r\n            value: null,\r\n            isValid: false,\r\n          },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    console.log(formState.inputs);\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/users/login\",\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/JSON\",\r\n          }\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"email\", formState.inputs.email.value);\r\n        formData.append(\"name\", formState.inputs.name.value);\r\n        formData.append(\"password\", formState.inputs.password.value);\r\n        formData.append(\"image\", formState.inputs.image.value);\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\r\n          \"POST\",\r\n          formData\r\n        );\r\n\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              element=\"input\"\r\n              id=\"name\"\r\n              type=\"text\"\r\n              label=\"Your Name\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please enter a name\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {!isLoginMode && (\r\n            <ImageUpload center id=\"image\" onInput={inputHandler} errorText=\"Please provide an image.\" />\r\n          )}\r\n          <Input\r\n            element=\"input\"\r\n            id=\"email\"\r\n            type=\"email\"\r\n            label=\"E-Mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter a valid email address.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            element=\"input\"\r\n            id=\"password\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please enter a valid password, at least 6 characters.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModeHandler}>\r\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"],"names":["props","_jsx","className","concat","style","children","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useState","isLoading","error","sendRequest","clearError","useHttpClient","formState","inputHandler","setFormData","useForm","email","value","isValid","password","_jsxs","React","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","async","event","preventDefault","console","log","inputs","responseData","process","JSON","stringify","login","userId","token","err","formData","FormData","append","name","image","Input","element","id","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","ImageUpload","center","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","Button","disabled","inverse","onClick","switchModeHandler","undefined","prevMode"],"sourceRoot":""}