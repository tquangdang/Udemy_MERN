{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\quang\\\\Desktop\\\\react-frontend-01-starting-setup\\\\src\\\\shared\\\\components\\\\FormElements\\\\Input.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from \"react\";\nimport \"./Input.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.val,\n        isValid: true\n      };\n    default:\n      return state;\n  }\n};\nconst Input = props => {\n  _s();\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: \"\",\n    isValid: false\n  });\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value\n    });\n  };\n\n  // The component decides which element to render (an <input> or a <textarea>) based on the props.element value.\n  // If props.element is equal to \"input\", it renders an <input> element; otherwise, it renders a <textarea> element.\n  const element = props.element === \"input\" ? /*#__PURE__*/_jsxDEV(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    value: inputState.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    value: inputState.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `form-control`,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), element]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Input, \"Ntekw6I9N1CtEETiCVVf03lAwbw=\");\n_c = Input;\nexport default Input;\nvar _c;\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["React","useReducer","jsxDEV","_jsxDEV","inputReducer","state","action","type","value","val","isValid","Input","props","_s","inputState","dispatch","changeHandler","event","target","element","id","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","rows","className","children","htmlFor","label","_c","$RefreshReg$"],"sources":["C:/Users/quang/Desktop/react-frontend-01-starting-setup/src/shared/components/FormElements/Input.js"],"sourcesContent":["import React, { useReducer } from \"react\";\r\n\r\nimport \"./Input.css\";\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE\":\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = (props) => {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: \"\",\r\n    isValid: false,\r\n  });\r\n\r\n  const changeHandler = (event) => {\r\n    dispatch({ type: \"CHANGE\", val: event.target.value });\r\n  };\r\n\r\n  // The component decides which element to render (an <input> or a <textarea>) based on the props.element value.\r\n  // If props.element is equal to \"input\", it renders an <input> element; otherwise, it renders a <textarea> element.\r\n  const element =\r\n    props.element === \"input\" ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        value={inputState.value}\r\n      />\r\n    ) : (\r\n      <textarea id={props.id} rows={props.rows || 3} onChange={changeHandler} value={inputState.value}/>\r\n    );\r\n\r\n  return (\r\n    <div className={`form-control`}>\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AAEzC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACtC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,QAAQ;MACX,OAAO;QACL,GAAGF,KAAK;QACRG,KAAK,EAAEF,MAAM,CAACG,GAAG;QACjBC,OAAO,EAAE;MACX,CAAC;IACH;MACE,OAAOL,KAAK;EAChB;AACF,CAAC;AAED,MAAMM,KAAK,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACvB,MAAM,CAACC,UAAU,EAAEC,QAAQ,CAAC,GAAGd,UAAU,CAACG,YAAY,EAAE;IACtDI,KAAK,EAAE,EAAE;IACTE,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,MAAMM,aAAa,GAAIC,KAAK,IAAK;IAC/BF,QAAQ,CAAC;MAAER,IAAI,EAAE,QAAQ;MAAEE,GAAG,EAAEQ,KAAK,CAACC,MAAM,CAACV;IAAM,CAAC,CAAC;EACvD,CAAC;;EAED;EACA;EACA,MAAMW,OAAO,GACXP,KAAK,CAACO,OAAO,KAAK,OAAO,gBACvBhB,OAAA;IACEiB,EAAE,EAAER,KAAK,CAACQ,EAAG;IACbb,IAAI,EAAEK,KAAK,CAACL,IAAK;IACjBc,WAAW,EAAET,KAAK,CAACS,WAAY;IAC/BC,QAAQ,EAAEN,aAAc;IACxBR,KAAK,EAAEM,UAAU,CAACN;EAAM;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC,gBAEFvB,OAAA;IAAUiB,EAAE,EAAER,KAAK,CAACQ,EAAG;IAACO,IAAI,EAAEf,KAAK,CAACe,IAAI,IAAI,CAAE;IAACL,QAAQ,EAAEN,aAAc;IAACR,KAAK,EAAEM,UAAU,CAACN;EAAM;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAClG;EAEH,oBACEvB,OAAA;IAAKyB,SAAS,EAAG,cAAc;IAAAC,QAAA,gBAC7B1B,OAAA;MAAO2B,OAAO,EAAElB,KAAK,CAACQ,EAAG;MAAAS,QAAA,EAAEjB,KAAK,CAACmB;IAAK;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC9CP,OAAO;EAAA;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACb,EAAA,CA/BIF,KAAK;AAAAqB,EAAA,GAALrB,KAAK;AAiCX,eAAeA,KAAK;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}